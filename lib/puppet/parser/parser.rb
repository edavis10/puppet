#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
    class ParseError < Puppet::Error; end
    class ImportError < Racc::ParseError; end
    class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 799)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$
...end grammar.ra/module_eval...
##### State transition tables begin ###

racc_action_table = [
    78,    57,    60,   127,   190,    39,    40,   292,   166,   250,
   252,   180,    39,    40,    55,   131,   184,   290,   251,    49,
    74,    78,    57,    60,   171,   289,   153,   157,   124,    39,
    40,    49,   248,   249,   139,    59,    62,   248,   249,    69,
    41,    74,   257,    45,    56,    79,   197,    41,    64,   210,
    45,    85,    49,    78,    57,    60,    59,    62,   138,    42,
    69,   261,   209,    42,    41,    56,    79,    45,   190,    64,
    42,   282,    85,    74,    78,    57,    60,   260,   256,    91,
    42,   139,    35,    92,    49,   265,    37,    42,    59,    62,
   259,    35,    69,     4,    74,    37,    93,    56,    79,   266,
   166,    64,     4,     8,    85,    49,    78,    57,    60,    59,
    62,    49,    42,    69,   153,   157,   171,  -150,    56,    79,
    94,  -146,    64,   166,   166,    85,    74,    78,    57,    60,
    33,    34,    35,    42,    49,    49,    37,    49,   269,   171,
   171,    59,    62,     4,   244,    69,   164,    74,   213,   214,
    56,    79,    57,    60,    64,   213,   315,    85,    49,    55,
    57,    60,    59,    62,   164,    42,    69,  -151,   161,   145,
  -148,    56,    79,   153,   157,    64,    57,    60,    85,    52,
    78,    57,    60,   180,   275,    35,    42,   131,   184,    37,
    49,   277,   264,   139,    59,    62,     4,  -145,    69,  -147,
    74,  -149,    53,    56,   161,   145,   131,    64,   283,   153,
   157,    49,    78,    57,    60,    59,    62,   253,    42,    69,
   192,   248,   249,   190,    56,    79,  -149,   162,    64,  -150,
  -146,    85,   211,    78,    57,    60,   213,   214,  -148,    42,
   220,    91,  -145,    49,   213,   221,   164,    59,    62,    42,
   285,    69,   138,   176,   177,   178,    56,  -163,    42,   291,
    64,   106,    92,  -147,    49,    78,    57,    60,    59,    62,
   133,    42,    69,   199,   258,   185,  -147,    56,   106,   189,
   192,    64,   192,   100,  -145,    74,    78,    57,    60,   316,
   285,   318,    42,  -148,  -147,  -145,    49,  -148,  -146,  -150,
    59,    62,   320,    98,    69,   193,    74,    48,   324,    56,
    79,  -199,    38,    64,  -146,   199,    85,    49,    78,    57,
    60,    59,    62,   195,    42,    69,   nil,   nil,   nil,   nil,
    56,    79,   nil,   nil,    64,   nil,   nil,    85,   nil,    78,
    57,    60,   nil,   nil,   nil,    42,   nil,   nil,   nil,    49,
   nil,   nil,   nil,    59,   204,   nil,   nil,    69,   nil,   nil,
   nil,   nil,   112,   nil,   nil,   nil,    64,   nil,   nil,   nil,
    49,    78,    57,    60,    59,    62,   nil,    42,    69,   nil,
   nil,   nil,   nil,    56,   nil,   nil,   nil,    64,   nil,   nil,
   nil,    74,    78,    57,    60,   nil,   nil,   nil,    42,   nil,
   nil,   nil,    49,   nil,   nil,   nil,    59,    62,   nil,   nil,
    69,   nil,    74,   nil,   nil,    56,    79,   nil,   nil,    64,
   nil,   nil,    85,    49,    78,    57,    60,    59,    62,   nil,
    42,    69,   nil,   nil,   nil,   nil,    56,    79,   nil,   nil,
    64,   nil,   nil,    85,    74,    78,    57,    60,   nil,   nil,
   nil,    42,   nil,   nil,   nil,    49,   nil,   nil,   nil,    59,
    62,   nil,   nil,    69,   nil,    74,   nil,   nil,    56,    79,
   nil,   nil,    64,   nil,   nil,    85,    49,    78,    57,    60,
    59,    62,   nil,    42,    69,   nil,   nil,   nil,   nil,    56,
    79,   nil,   nil,    64,   nil,   nil,    85,   nil,    78,    57,
    60,   nil,   nil,   nil,    42,   nil,   nil,   nil,    49,   nil,
   nil,   nil,    59,    62,   nil,   nil,    69,    78,    57,    60,
   nil,    56,   nil,   nil,   nil,    64,   nil,   nil,   nil,    49,
   nil,   nil,   nil,    59,   114,   nil,    42,    69,    78,    57,
    60,   nil,   112,   nil,   nil,   nil,    64,   nil,    49,   nil,
   nil,   nil,    59,    62,   nil,   nil,    69,    42,    74,   nil,
   nil,    56,   nil,   nil,   nil,    64,   nil,   nil,   nil,    49,
    78,    57,    60,    59,    62,   nil,    42,    69,   nil,   nil,
   nil,   nil,    56,    79,   nil,   nil,    64,   nil,   nil,    85,
    74,    78,    57,    60,   nil,   nil,   nil,    42,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    59,    62,   nil,   nil,    69,
   nil,   nil,   nil,   nil,    56,    79,   nil,   nil,    64,   nil,
   nil,    85,    49,    78,    57,    60,    59,    62,   nil,    42,
    69,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,    64,
   nil,   nil,   nil,    74,    78,    57,    60,   nil,   nil,   nil,
    42,   nil,   nil,   nil,    49,   nil,   nil,   nil,    59,    62,
   nil,   nil,    69,    78,    57,    60,   nil,    56,    79,   nil,
   nil,    64,   nil,   nil,    85,    49,   nil,   nil,   nil,    59,
    62,   nil,    42,    69,    78,    57,    60,   nil,    56,   nil,
   nil,   nil,    64,   nil,    49,   nil,   nil,   nil,    59,    62,
   nil,   nil,    69,    42,   nil,   nil,   nil,    56,   nil,   nil,
   nil,    64,   nil,   nil,   nil,    49,    78,    57,    60,    59,
    62,   nil,    42,    69,   nil,   nil,   nil,   nil,    56,   nil,
   nil,   nil,    64,   nil,   nil,   nil,    74,    78,    57,    60,
   nil,   nil,   nil,    42,   nil,   nil,   nil,    49,   nil,   nil,
   nil,    59,    62,   nil,   nil,    69,   nil,    74,   nil,   nil,
    56,    79,   nil,   nil,    64,   nil,   156,    85,    49,   nil,
   nil,   nil,    59,    62,   147,    42,    69,    78,    57,    60,
   142,    56,    79,   nil,   nil,    64,   nil,   nil,    85,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,    78,    57,
    60,   nil,   159,   160,   161,   145,   146,   148,    49,   153,
   157,   nil,    59,    62,   nil,   nil,    69,   nil,    74,   nil,
   nil,    56,   nil,   nil,   nil,    64,   nil,   nil,   nil,    49,
    78,    57,    60,    59,    62,   nil,    42,    69,   nil,   nil,
   nil,   nil,    56,    79,   nil,   nil,    64,   nil,   nil,    85,
    74,   nil,    57,    60,   nil,   206,   nil,    42,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    59,    62,   nil,   nil,    69,
   nil,    57,    60,   nil,    56,    79,   nil,   nil,    64,   nil,
   nil,    85,    49,   nil,   nil,   nil,    59,   204,   nil,    42,
    69,   280,    57,    60,   nil,   112,   nil,   nil,   nil,    64,
   nil,    49,    57,    60,   nil,    59,    62,   nil,   nil,    69,
    42,   nil,   nil,    53,    56,   nil,   nil,   nil,    64,   nil,
   nil,   nil,    49,   nil,    57,    60,    59,    62,   287,    42,
    69,   nil,    49,   nil,    53,    56,    59,   204,   nil,    64,
    69,   nil,    57,    60,   nil,   112,   nil,   nil,   nil,    64,
    42,   nil,   nil,   nil,    49,   nil,   nil,   nil,    59,   204,
    42,   nil,    69,    57,    60,   nil,   nil,   112,   nil,    57,
    60,    64,    49,   nil,   nil,   nil,    59,   204,   nil,   nil,
    69,   nil,    42,   134,   nil,   112,   nil,   nil,   nil,    64,
   nil,   nil,   nil,    49,    57,    60,   nil,    59,    62,    49,
    42,    69,   nil,    59,   204,    53,    56,    69,    57,    60,
    64,   nil,   112,   nil,   217,   nil,    64,   nil,   nil,   nil,
   nil,    42,   nil,   nil,    49,   nil,   nil,    42,    59,    62,
    57,    60,    69,   nil,   nil,   nil,    53,    56,    49,   nil,
   nil,    64,    59,   204,    57,    60,    69,   nil,   nil,   nil,
   nil,   112,    42,   nil,   nil,    64,   nil,   nil,   nil,   nil,
    49,   nil,   nil,   nil,    59,   204,    42,   nil,    69,   nil,
   nil,   nil,   nil,   112,    49,   158,   nil,    64,    59,   204,
   nil,   nil,    69,   nil,   151,   156,   nil,   112,    42,   nil,
   nil,    64,   nil,   147,   149,   152,   155,   151,   156,   nil,
   nil,   nil,    42,   nil,   nil,   nil,   147,   149,   152,   155,
   nil,   nil,   159,   160,   161,   145,   nil,   150,   154,   153,
   157,   159,   160,   161,   145,   146,   148,   nil,   153,   157,
   150,   154,   nil,   nil,   159,   160,   161,   145,   146,   148,
   nil,   153,   157,   151,   156,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   147,   149,   152,   155,   151,   156,   nil,   nil,
   nil,   nil,   nil,   nil,   219,   147,   149,   152,   155,   159,
   160,   161,   145,   146,   148,   nil,   153,   157,   nil,   nil,
   159,   160,   161,   145,   146,   148,   nil,   153,   157,   150,
   154,   nil,   nil,   159,   160,   161,   145,   146,   148,   nil,
   153,   157,   151,   156,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   147,   149,   152,   155,   151,   156,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   147,   149,   152,   155,   nil,   156,
   nil,   nil,   nil,   nil,   nil,   nil,   154,   147,   nil,   159,
   160,   161,   145,   146,   148,   nil,   153,   157,   150,   154,
   156,   nil,   159,   160,   161,   145,   146,   148,   147,   153,
   157,   nil,   nil,   156,   nil,   159,   160,   161,   145,   146,
   148,   147,   153,   157,   159,   160,   161,   145,   146,   148,
   nil,   153,   157,   nil,   nil,   nil,   159,   160,   161,   145,
   146,   148,   311,   153,   157,   nil,   nil,   nil,   nil,   159,
   160,   161,   145,   146,   148,   nil,   153,   157,   nil,   nil,
   nil,   303,   nil,    18,   nil,    23,    26,   nil,     1,     5,
   nil,    12,   nil,    16,   nil,    20,   nil,    27,   nil,   nil,
     4,     8,    18,   308,    23,    26,   nil,     1,     5,   nil,
    12,   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,
     8,   nil,   286,   nil,    18,   nil,    23,    26,   nil,     1,
     5,   nil,    12,   nil,    16,   nil,    20,   nil,    27,   nil,
   nil,     4,     8,    18,   321,    23,    26,   nil,     1,     5,
   nil,    12,   nil,    16,   nil,    20,   nil,    27,   nil,   nil,
     4,     8,   nil,   322,   nil,    18,   nil,    23,    26,   nil,
     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,    27,
   nil,   nil,     4,     8,    18,   272,    23,    26,   nil,     1,
     5,   nil,    12,   nil,    16,   nil,    20,   nil,    27,   nil,
   nil,     4,     8,   nil,   325,   nil,    18,   nil,    23,    26,
   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,
    27,   nil,   nil,     4,     8,    18,   327,    23,    26,   nil,
     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,    27,
   nil,   nil,     4,     8,   nil,   329,   nil,    18,   nil,    23,
    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,    18,   235,    23,    26,
   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,
    27,   nil,   nil,     4,     8,   nil,   330,   nil,    18,   nil,
    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,    18,   nil,    23,
    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,    18,   nil,    23,    26,
   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,
    27,   nil,   nil,     4,     8,    18,   nil,    23,    26,   nil,
     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,    27,
   nil,   nil,     4,     8,   159,   160,   161,   145,   nil,   nil,
   nil,   153,   157 ]

racc_action_check = [
   156,   156,   156,    44,   131,   124,   124,   246,    93,   167,
   170,   106,   127,   127,    62,    48,   106,   243,   170,    93,
   156,   155,   155,   155,    93,   243,   239,   239,    44,    12,
    12,   156,   246,   246,    62,   156,   156,   167,   167,   156,
   124,   155,   180,   124,   156,   156,   131,   127,   156,   135,
   127,   156,   155,   154,   154,   154,   155,   155,   218,   156,
   155,   184,   135,   124,    12,   155,   155,    12,   114,   155,
   127,   218,   155,   154,   152,   152,   152,   182,   179,    21,
   155,   114,     5,    21,   154,   186,     5,    12,   154,   154,
   182,    28,   154,     5,   152,    28,    21,   154,   154,   188,
    94,   154,    28,    28,   154,   152,   159,   159,   159,   152,
   152,    94,   154,   152,   222,   222,    94,    87,   152,   152,
    21,    84,   152,   166,   247,   152,   159,   160,   160,   160,
     1,     1,    26,   152,   166,   247,    26,   159,   191,   166,
   247,   159,   159,    26,   163,   159,   192,   160,   163,   163,
   159,   159,   177,   177,   159,   279,   279,   159,   160,    16,
    16,    16,   160,   160,   193,   159,   160,    83,   237,   237,
    82,   160,   160,   237,   237,   160,    23,    23,   160,    16,
    18,    18,    18,   260,   198,   185,   160,   199,   260,   185,
    16,   200,   185,   204,    16,    16,   185,    81,    16,    77,
    18,    73,    16,    16,   238,   238,   176,    16,   221,   238,
   238,    18,    20,    20,    20,    18,    18,   175,    16,    18,
   165,   175,   175,   164,    18,    18,    89,    90,    18,    72,
    71,    18,   137,    91,    91,    91,   137,   137,    68,    18,
   141,    67,    65,    20,   141,   141,    92,    20,    20,   157,
   235,    20,    58,    95,    97,    98,    20,    56,   153,   245,
    20,    99,   102,    54,    91,   161,   161,   161,    91,    91,
    50,    20,    91,   254,   181,   107,   111,    91,    36,   113,
   271,    91,   115,    27,   116,   161,   145,   145,   145,   285,
   286,   289,    91,   118,   295,   297,   161,   298,   299,   300,
   161,   161,   302,    25,   161,   119,   145,    15,   314,   161,
   161,   315,     9,   161,   120,   132,   161,   145,   189,   189,
   189,   145,   145,   125,   161,   145,   nil,   nil,   nil,   nil,
   145,   145,   nil,   nil,   145,   nil,   nil,   145,   nil,   277,
   277,   277,   nil,   nil,   nil,   145,   nil,   nil,   nil,   189,
   nil,   nil,   nil,   189,   189,   nil,   nil,   189,   nil,   nil,
   nil,   nil,   189,   nil,   nil,   nil,   189,   nil,   nil,   nil,
   277,   146,   146,   146,   277,   277,   nil,   189,   277,   nil,
   nil,   nil,   nil,   277,   nil,   nil,   nil,   277,   nil,   nil,
   nil,   146,   147,   147,   147,   nil,   nil,   nil,   277,   nil,
   nil,   nil,   146,   nil,   nil,   nil,   146,   146,   nil,   nil,
   146,   nil,   147,   nil,   nil,   146,   146,   nil,   nil,   146,
   nil,   nil,   146,   147,    33,    33,    33,   147,   147,   nil,
   146,   147,   nil,   nil,   nil,   nil,   147,   147,   nil,   nil,
   147,   nil,   nil,   147,    33,    34,    34,    34,   nil,   nil,
   nil,   147,   nil,   nil,   nil,    33,   nil,   nil,   nil,    33,
    33,   nil,   nil,    33,   nil,    34,   nil,   nil,    33,    33,
   nil,   nil,    33,   nil,   nil,    33,    34,   261,   261,   261,
    34,    34,   nil,    33,    34,   nil,   nil,   nil,   nil,    34,
    34,   nil,   nil,    34,   nil,   nil,    34,   nil,    38,    38,
    38,   nil,   nil,   nil,    34,   nil,   nil,   nil,   261,   nil,
   nil,   nil,   261,   261,   nil,   nil,   261,   257,   257,   257,
   nil,   261,   nil,   nil,   nil,   261,   nil,   nil,   nil,    38,
   nil,   nil,   nil,    38,    38,   nil,   261,    38,   148,   148,
   148,   nil,    38,   nil,   nil,   nil,    38,   nil,   257,   nil,
   nil,   nil,   257,   257,   nil,   nil,   257,    38,   148,   nil,
   nil,   257,   nil,   nil,   nil,   257,   nil,   nil,   nil,   148,
    85,    85,    85,   148,   148,   nil,   257,   148,   nil,   nil,
   nil,   nil,   148,   148,   nil,   nil,   148,   nil,   nil,   148,
    85,   190,   190,   190,   nil,   nil,   nil,   148,   nil,   nil,
   nil,    85,   nil,   nil,   nil,    85,    85,   nil,   nil,    85,
   nil,   nil,   nil,   nil,    85,    85,   nil,   nil,    85,   nil,
   nil,    85,   190,   151,   151,   151,   190,   190,   nil,    85,
   190,   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,   190,
   nil,   nil,   nil,   151,    55,    55,    55,   nil,   nil,   nil,
   190,   nil,   nil,   nil,   151,   nil,   nil,   nil,   151,   151,
   nil,   nil,   151,   197,   197,   197,   nil,   151,   151,   nil,
   nil,   151,   nil,   nil,   151,    55,   nil,   nil,   nil,    55,
    55,   nil,   151,    55,   212,   212,   212,   nil,    55,   nil,
   nil,   nil,    55,   nil,   197,   nil,   nil,   nil,   197,   197,
   nil,   nil,   197,    55,   nil,   nil,   nil,   197,   nil,   nil,
   nil,   197,   nil,   nil,   nil,   212,   150,   150,   150,   212,
   212,   nil,   197,   212,   nil,   nil,   nil,   nil,   212,   nil,
   nil,   nil,   212,   nil,   nil,   nil,   150,    79,    79,    79,
   nil,   nil,   nil,   212,   nil,   nil,   nil,   150,   nil,   nil,
   nil,   150,   150,   nil,   nil,   150,   nil,    79,   nil,   nil,
   150,   150,   nil,   nil,   150,   nil,   228,   150,    79,   nil,
   nil,   nil,    79,    79,   228,   150,    79,    78,    78,    78,
    78,    79,    79,   nil,   nil,    79,   nil,   nil,    79,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    79,   nil,    74,    74,
    74,   nil,   228,   228,   228,   228,   228,   228,    78,   228,
   228,   nil,    78,    78,   nil,   nil,    78,   nil,    74,   nil,
   nil,    78,   nil,   nil,   nil,    78,   nil,   nil,   nil,    74,
   149,   149,   149,    74,    74,   nil,    78,    74,   nil,   nil,
   nil,   nil,    74,    74,   nil,   nil,    74,   nil,   nil,    74,
   149,   nil,   133,   133,   nil,   133,   nil,    74,   nil,   nil,
   nil,   149,   nil,   nil,   nil,   149,   149,   nil,   nil,   149,
   nil,   210,   210,   nil,   149,   149,   nil,   nil,   149,   nil,
   nil,   149,   133,   nil,   nil,   nil,   133,   133,   nil,   149,
   133,   210,   138,   138,   nil,   133,   nil,   nil,   nil,   133,
   nil,   210,   206,   206,   nil,   210,   210,   nil,   nil,   210,
   133,   nil,   nil,   210,   210,   nil,   nil,   nil,   210,   nil,
   nil,   nil,   138,   nil,   241,   241,   138,   138,   241,   210,
   138,   nil,   206,   nil,   138,   138,   206,   206,   nil,   138,
   206,   nil,   251,   251,   nil,   206,   nil,   nil,   nil,   206,
   138,   nil,   nil,   nil,   241,   nil,   nil,   nil,   241,   241,
   206,   nil,   241,    52,    52,   nil,   nil,   241,   nil,   290,
   290,   241,   251,   nil,   nil,   nil,   251,   251,   nil,   nil,
   251,   nil,   241,    52,   nil,   251,   nil,   nil,   nil,   251,
   nil,   nil,   nil,    52,   139,   139,   nil,    52,    52,   290,
   251,    52,   nil,   290,   290,    52,    52,   290,   313,   313,
    52,   nil,   290,   nil,   139,   nil,   290,   nil,   nil,   nil,
   nil,    52,   nil,   nil,   139,   nil,   nil,   290,   139,   139,
   162,   162,   139,   nil,   nil,   nil,   139,   139,   313,   nil,
   nil,   139,   313,   313,   252,   252,   313,   nil,   nil,   nil,
   nil,   313,   139,   nil,   nil,   313,   nil,   nil,   nil,   nil,
   162,   nil,   nil,   nil,   162,   162,   313,   nil,   162,   nil,
   nil,   nil,   nil,   162,   252,    88,   nil,   162,   252,   252,
   nil,   nil,   252,   nil,    88,    88,   nil,   252,   162,   nil,
   nil,   252,   nil,    88,    88,    88,    88,   105,   105,   nil,
   nil,   nil,   252,   nil,   nil,   nil,   105,   105,   105,   105,
   nil,   nil,   225,   225,   225,   225,   nil,    88,    88,   225,
   225,    88,    88,    88,    88,    88,    88,   nil,    88,    88,
   105,   105,   nil,   nil,   105,   105,   105,   105,   105,   105,
   nil,   105,   105,   231,   231,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   231,   231,   231,   231,   140,   140,   nil,   nil,
   nil,   nil,   nil,   nil,   140,   140,   140,   140,   140,   224,
   224,   224,   224,   224,   224,   nil,   224,   224,   nil,   nil,
   231,   231,   231,   231,   231,   231,   nil,   231,   231,   140,
   140,   nil,   nil,   140,   140,   140,   140,   140,   140,   nil,
   140,   140,   227,   227,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   227,   227,   227,   227,   104,   104,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   104,   104,   104,   104,   nil,   232,
   nil,   nil,   nil,   nil,   nil,   nil,   227,   232,   nil,   227,
   227,   227,   227,   227,   227,   nil,   227,   227,   104,   104,
   229,   nil,   104,   104,   104,   104,   104,   104,   229,   104,
   104,   nil,   nil,   226,   nil,   232,   232,   232,   232,   232,
   232,   226,   232,   232,   233,   233,   233,   233,   233,   233,
   nil,   233,   233,   nil,   nil,   nil,   229,   229,   229,   229,
   229,   229,   273,   229,   229,   nil,   nil,   nil,   nil,   226,
   226,   226,   226,   226,   226,   nil,   226,   226,   nil,   nil,
   nil,   256,   nil,   273,   nil,   273,   273,   nil,   273,   273,
   nil,   273,   nil,   273,   nil,   273,   nil,   273,   nil,   nil,
   273,   273,   256,   265,   256,   256,   nil,   256,   256,   nil,
   256,   nil,   256,   nil,   256,   nil,   256,   nil,   nil,   256,
   256,   nil,   236,   nil,   265,   nil,   265,   265,   nil,   265,
   265,   nil,   265,   nil,   265,   nil,   265,   nil,   265,   nil,
   nil,   265,   265,   236,   304,   236,   236,   nil,   236,   236,
   nil,   236,   nil,   236,   nil,   236,   nil,   236,   nil,   nil,
   236,   236,   nil,   309,   nil,   304,   nil,   304,   304,   nil,
   304,   304,   nil,   304,   nil,   304,   nil,   304,   nil,   304,
   nil,   nil,   304,   304,   309,   195,   309,   309,   nil,   309,
   309,   nil,   309,   nil,   309,   nil,   309,   nil,   309,   nil,
   nil,   309,   309,   nil,   316,   nil,   195,   nil,   195,   195,
   nil,   195,   195,   nil,   195,   nil,   195,   nil,   195,   nil,
   195,   nil,   nil,   195,   195,   316,   318,   316,   316,   nil,
   316,   316,   nil,   316,   nil,   316,   nil,   316,   nil,   316,
   nil,   nil,   316,   316,   nil,   326,   nil,   318,   nil,   318,
   318,   nil,   318,   318,   nil,   318,   nil,   318,   nil,   318,
   nil,   318,   nil,   nil,   318,   318,   326,   158,   326,   326,
   nil,   326,   326,   nil,   326,   nil,   326,   nil,   326,   nil,
   326,   nil,   nil,   326,   326,   nil,   328,   nil,   158,   nil,
   158,   158,   nil,   158,   158,   nil,   158,   nil,   158,   nil,
   158,   nil,   158,   nil,   nil,   158,   158,   328,   nil,   328,
   328,   nil,   328,   328,   nil,   328,   nil,   328,   nil,   328,
   nil,   328,   nil,   nil,   328,   328,    30,   nil,    30,    30,
   nil,    30,    30,   nil,    30,   nil,    30,   nil,    30,   nil,
    30,   nil,   nil,    30,    30,     0,   nil,     0,     0,   nil,
     0,     0,   nil,     0,   nil,     0,   nil,     0,   nil,     0,
   nil,   nil,     0,     0,   223,   223,   223,   223,   nil,   nil,
   nil,   223,   223 ]

racc_action_pointer = [
  1547,   117,   nil,   nil,   nil,    48,   nil,   nil,   nil,   306,
   nil,   nil,    26,   nil,   nil,   301,   157,   nil,   178,   nil,
   210,    77,   nil,   173,   nil,   303,    98,   241,    57,   nil,
  1528,   nil,   nil,   422,   443,   nil,   256,   nil,   496,   nil,
   nil,   nil,   nil,   nil,    -7,   nil,   nil,   nil,   -23,   nil,
   249,   nil,   960,   nil,   242,   642,   255,   nil,   242,   nil,
   nil,   nil,    12,   nil,   nil,   221,   nil,   239,   217,   nil,
   nil,   209,   208,   180,   796,   nil,   nil,   178,   775,   735,
   nil,   176,   149,   146,   100,   568,   nil,    96,  1069,   205,
   221,   231,   208,   -14,    78,   247,   nil,   244,   255,   239,
   nil,   nil,   256,   nil,  1200,  1082,   -22,   240,   nil,   nil,
   nil,   255,   nil,   240,    59,   272,   263,   nil,   272,   287,
   293,   nil,   nil,   nil,     2,   317,   nil,     9,   nil,   nil,
   nil,    -5,   305,   849,   nil,    39,   nil,   227,   889,   991,
  1141,   235,   nil,   nil,   nil,   284,   369,   390,   536,   828,
   714,   621,    72,   197,    51,    19,    -2,   188,  1490,   104,
   125,   263,  1027,   139,   214,   210,   101,   -11,   nil,   nil,
    -6,   nil,   nil,   nil,   nil,   173,   168,   149,   nil,    72,
    29,   251,    67,   nil,    48,   151,    79,   nil,    92,   316,
   589,   131,   108,   126,   nil,  1408,   nil,   661,   177,   149,
   182,   nil,   nil,   nil,   171,   nil,   899,   nil,   nil,   nil,
   868,   nil,   682,   nil,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   203,    55,  1542,  1117,  1060,  1247,  1187,   750,  1234,
   nil,  1128,  1213,  1222,   nil,   221,  1345,   114,   150,   -33,
   nil,   921,   nil,     7,   nil,   252,   -16,   102,   nil,   nil,
   nil,   939,  1041,   nil,   263,   nil,  1304,   515,   nil,   nil,
   150,   475,   nil,   nil,   nil,  1326,   nil,   nil,   nil,   nil,
   nil,   270,   nil,  1285,   nil,   nil,   nil,   337,   nil,   146,
   nil,   nil,   nil,   nil,   nil,   283,   261,   nil,   nil,   285,
   966,   nil,   nil,   nil,   nil,   273,   nil,   274,   276,   277,
   278,   nil,   295,   nil,  1367,   nil,   nil,   nil,   nil,  1386,
   nil,   nil,   nil,  1005,   301,   304,  1427,   nil,  1449,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1468,   nil,  1509,   nil,
   nil ]

racc_action_default = [
  -175,  -201,   -15,    -3,  -165,  -166,   -16,    -5,  -163,  -201,
   -17,    -6,  -201,    -7,    -8,  -201,  -164,    -9,  -201,   -10,
  -201,  -201,   -11,  -201,   -12,  -201,  -201,   -39,  -201,   -13,
    -1,   -14,    -2,  -201,  -201,  -166,  -175,  -164,   -72,  -172,
  -171,  -170,  -200,  -174,  -175,  -173,  -167,  -169,   -79,  -192,
  -201,   -31,  -201,   -33,   -32,  -201,   -63,  -102,   -21,  -104,
  -103,   -22,   -62,   -23,   -61,   -26,  -153,  -201,   -27,  -152,
  -151,   -28,   -29,   -30,  -201,   -94,  -112,   -90,  -201,  -201,
   -97,   -91,   -95,   -99,   -92,  -201,   -96,   -93,  -201,   -98,
  -201,  -201,   -72,  -175,  -175,   -42,  -154,  -156,  -201,  -175,
   -40,   -38,  -201,    -4,   -70,   -71,  -176,  -175,  -177,   -73,
   -67,   -64,   -63,   -59,   -62,  -198,   -65,   -57,   -68,  -201,
   -66,  -150,   -69,  -149,  -201,  -201,  -186,  -201,   -77,   -78,
   -80,  -201,  -198,  -201,   -20,  -201,   -82,  -201,  -201,  -201,
  -201,  -201,  -195,  -128,  -121,  -201,  -201,  -201,  -201,  -201,
  -201,  -201,  -201,  -201,  -201,  -201,  -201,  -201,  -201,  -201,
  -201,  -201,  -201,  -201,  -201,  -198,  -175,  -201,   -46,   -48,
  -201,   -62,   -55,   -54,   -45,  -201,   -79,  -201,   331,  -201,
  -185,  -201,  -201,  -180,  -183,  -201,  -201,  -188,  -201,   -60,
  -201,  -201,  -199,   -72,  -187,  -201,  -168,  -201,  -201,  -199,
  -201,  -147,  -139,  -140,   -62,  -145,  -201,  -148,  -146,   -18,
  -201,  -105,  -201,  -196,  -197,   -24,   -25,  -101,  -201,  -131,
  -193,  -197,  -117,  -119,  -123,  -120,  -125,  -130,  -127,  -124,
  -113,  -129,  -126,  -122,  -114,  -109,  -201,  -115,  -116,  -118,
  -137,  -201,  -133,  -201,  -106,  -201,  -201,  -201,   -51,   -50,
   -44,  -201,  -201,   -43,  -198,  -155,  -201,  -201,  -178,  -179,
  -201,  -201,  -190,  -189,  -191,  -201,   -34,   -58,   -75,   -35,
   -74,  -198,  -162,  -201,   -76,   -37,   -81,  -201,  -142,  -198,
   -19,   -83,  -100,  -194,  -108,  -201,  -109,  -132,  -134,  -201,
  -201,   -36,   -49,   -47,   -88,   -84,   -52,   -85,   -89,   -86,
   -87,   -53,  -201,  -158,  -201,  -184,  -181,  -182,  -160,  -201,
   -56,  -161,  -144,  -201,  -201,  -197,  -201,  -107,  -201,  -138,
   -41,  -157,  -159,  -143,  -141,  -111,  -201,  -136,  -201,  -110,
  -135 ]

racc_goto_table = [
    15,    21,   103,   203,    30,    36,   183,   200,   115,   132,
    43,    46,    58,   242,   122,   117,    63,    32,   167,   175,
   107,    25,   191,   284,   128,   215,    99,    70,   276,   102,
    15,    21,   137,   296,   301,   241,   240,   313,   293,   198,
   202,    95,   279,    97,   188,   186,    44,   125,   135,    70,
   113,   194,    63,   108,   181,   141,   182,    54,   101,    73,
   263,   126,   165,    70,    96,   nil,   nil,   nil,   163,   nil,
   nil,   nil,   245,   nil,   317,   nil,   278,   nil,   nil,   111,
   200,   123,   nil,   179,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   246,   288,    54,   nil,    73,   nil,   215,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    72,   nil,   nil,   240,   108,   nil,   nil,   nil,
   nil,   nil,    43,   nil,   187,    43,   196,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   121,   218,   nil,   254,   216,    63,
   nil,   nil,   nil,   nil,    70,   nil,   nil,   nil,    72,    70,
    70,   230,   128,    90,   nil,   234,   nil,   nil,    15,    21,
   306,   302,   236,   271,   319,   122,   267,   nil,   270,   nil,
   nil,   nil,   nil,    70,   201,   128,   123,   nil,   310,    54,
    54,    73,    73,   323,   nil,   262,   314,   200,   136,   nil,
    65,   nil,   nil,   nil,   nil,    15,    21,   nil,   nil,   273,
    70,   nil,   nil,   201,   nil,   123,   nil,   nil,   103,   nil,
   216,   136,   116,   nil,   nil,   nil,   nil,    70,   255,   nil,
   nil,    70,   nil,   nil,   136,   nil,    65,   nil,   nil,   121,
   111,   nil,   123,   nil,    72,    72,    15,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   103,   nil,   201,   nil,   123,
   nil,    54,    70,    73,   nil,    71,    15,    21,   121,   nil,
   304,   nil,    70,    70,   nil,    15,    21,   172,   172,   309,
   nil,   nil,   nil,    15,    21,   nil,   103,   120,   nil,   nil,
   nil,   103,   201,   nil,   123,   121,   nil,   nil,   nil,    68,
   nil,    71,   295,   295,   123,   123,   nil,   nil,   103,   nil,
   103,    70,   121,   nil,    15,    21,    72,   205,   nil,    15,
    21,   118,    65,    65,   nil,   nil,    15,    21,    15,    21,
   326,    51,   328,   268,    70,    68,    15,    21,    15,    21,
   274,   201,   nil,   123,   nil,   nil,   205,   121,   nil,   nil,
   172,   nil,   nil,   110,   nil,   281,   nil,   300,   300,   nil,
   nil,   nil,   nil,   nil,   201,   nil,   123,    51,   nil,   nil,
   nil,   nil,   nil,   116,   nil,   nil,   173,   173,   nil,   nil,
   nil,   nil,   208,   nil,   nil,   nil,   nil,    71,    71,   nil,
   205,   nil,   nil,   nil,    65,   nil,   121,   nil,   nil,   nil,
   305,   nil,   nil,   nil,   307,   nil,   nil,   nil,   nil,   nil,
   nil,   208,   nil,   nil,    88,   nil,   207,   nil,   nil,   121,
   312,    68,    68,   nil,   nil,   205,   nil,   nil,   nil,   104,
   105,   172,   nil,   nil,   nil,   297,   297,   nil,   120,   nil,
   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,   173,
   nil,   nil,   nil,    51,    51,   208,   nil,   nil,   nil,    71,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   140,   nil,   118,   nil,   205,   143,   nil,   nil,   nil,   nil,
   nil,   144,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   207,
   208,   nil,   nil,    68,   nil,   nil,   nil,   205,   nil,   nil,
   299,   299,   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   207,    51,   nil,   nil,   nil,   nil,
   173,   nil,   nil,   nil,   298,   298,   nil,   nil,   nil,   208,
   nil,   222,   223,   224,   225,   226,   227,   228,   229,   nil,
   231,   232,   233,   nil,   nil,   237,   238,   239,   nil,   nil,
   nil,   nil,   208,   nil,   nil,   nil,   294,   294,   nil,   nil,
   nil,   nil,   nil,   207,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   207 ]

racc_goto_check = [
    20,    33,     4,    61,     2,    28,    72,    59,    31,    34,
    55,    68,    18,    57,    46,    43,    20,     3,    37,    37,
    64,     1,    32,    54,    48,    19,    28,    45,    51,    33,
    20,    33,    52,    42,    42,    56,    59,    53,    38,    32,
    60,    36,    62,    63,    30,    65,    66,    67,    18,    45,
    29,    69,    20,     3,    70,    52,    71,    27,     5,    25,
    73,     3,    31,    45,    27,   nil,   nil,   nil,    52,   nil,
   nil,   nil,    32,   nil,    54,   nil,    61,   nil,   nil,    27,
    59,    25,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    57,    27,   nil,    25,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,   nil,   nil,    59,     3,   nil,   nil,   nil,
   nil,   nil,    55,   nil,     3,    55,    68,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,    18,   nil,    34,    20,    20,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,    24,    45,
    45,    55,    48,    49,   nil,    55,   nil,   nil,    20,    33,
    72,    32,     2,    31,    59,    46,    43,   nil,    48,   nil,
   nil,   nil,   nil,    45,    27,    48,    25,   nil,    32,    27,
    27,    25,    25,    61,   nil,    28,    32,    59,    49,   nil,
    21,   nil,   nil,   nil,   nil,    20,    33,   nil,   nil,     2,
    45,   nil,   nil,    27,   nil,    25,   nil,   nil,     4,   nil,
    20,    49,    21,   nil,   nil,   nil,   nil,    45,    27,   nil,
   nil,    45,   nil,   nil,    49,   nil,    21,   nil,   nil,    24,
    27,   nil,    25,   nil,    24,    24,    20,    33,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,    27,   nil,    25,
   nil,    27,    45,    25,   nil,    23,    20,    33,    24,   nil,
     2,   nil,    45,    45,   nil,    20,    33,    21,    21,     2,
   nil,   nil,   nil,    20,    33,   nil,     4,    23,   nil,   nil,
   nil,     4,    27,   nil,    25,    24,   nil,   nil,   nil,    22,
   nil,    23,    27,    27,    25,    25,   nil,   nil,     4,   nil,
     4,    45,    24,   nil,    20,    33,    24,    21,   nil,    20,
    33,    22,    21,    21,   nil,   nil,    20,    33,    20,    33,
     2,    26,     2,    49,    45,    22,    20,    33,    20,    33,
    49,    27,   nil,    25,   nil,   nil,    21,    24,   nil,   nil,
    21,   nil,   nil,    26,   nil,    49,   nil,    24,    24,   nil,
   nil,   nil,   nil,   nil,    27,   nil,    25,    26,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,    22,    22,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   nil,    23,    23,   nil,
    21,   nil,   nil,   nil,    21,   nil,    24,   nil,   nil,   nil,
    49,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   nil,    47,   nil,    22,   nil,   nil,    24,
    49,    22,    22,   nil,   nil,    21,   nil,   nil,   nil,    47,
    47,    21,   nil,   nil,   nil,    21,    21,   nil,    23,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,    22,
   nil,   nil,   nil,    26,    26,    23,   nil,   nil,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,    22,   nil,    21,    47,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
    23,   nil,   nil,    22,   nil,   nil,   nil,    21,   nil,   nil,
    23,    23,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,    26,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   nil,    22,    22,   nil,   nil,   nil,    23,
   nil,    47,    47,    47,    47,    47,    47,    47,    47,   nil,
    47,    47,    47,   nil,   nil,    47,    47,    47,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,    26,    26,   nil,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22 ]

racc_goto_pointer = [
   nil,    21,     4,    17,   -28,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -4,  -113,
     0,   174,   273,   239,    96,    43,   305,    41,     0,    12,
   -69,   -30,   -93,     1,   -39,   nil,    20,   -75,  -209,   nil,
   nil,   nil,  -218,   -23,   nil,    11,   -24,   386,   -24,   133,
   nil,  -171,   -23,  -242,  -212,    -2,  -127,  -149,   nil,  -126,
   -93,  -130,  -164,    20,   -16,   -62,    34,     3,    -1,   -73,
   -52,   -50,  -100,  -125 ]

racc_goto_default = [
   nil,   nil,   nil,   174,     3,     7,    11,    13,    14,    17,
    19,    22,    24,    29,    31,     2,     6,    10,   nil,    61,
    80,    81,    82,    84,    87,    89,    75,    77,     9,   nil,
   nil,   nil,   nil,    67,   nil,    28,   nil,   nil,   168,   247,
   169,   170,   nil,   nil,   119,    83,    86,   nil,   109,    76,
   129,   130,   nil,   212,   nil,    66,   nil,   nil,   243,    50,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 63, :_reduce_1,
  1, 63, :_reduce_none,
  1, 64, :_reduce_none,
  2, 64, :_reduce_4,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  4, 74, :_reduce_18,
  5, 74, :_reduce_19,
  3, 74, :_reduce_20,
  2, 74, :_reduce_21,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  3, 80, :_reduce_24,
  3, 80, :_reduce_25,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_33,
  5, 67, :_reduce_34,
  5, 67, :_reduce_35,
  5, 67, :_reduce_36,
  5, 78, :_reduce_37,
  2, 68, :_reduce_38,
  1, 97, :_reduce_39,
  2, 97, :_reduce_40,
  6, 69, :_reduce_41,
  2, 69, :_reduce_42,
  3, 98, :_reduce_43,
  3, 98, :_reduce_44,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  3, 99, :_reduce_47,
  1, 100, :_reduce_none,
  3, 100, :_reduce_49,
  1, 101, :_reduce_50,
  1, 101, :_reduce_51,
  3, 102, :_reduce_52,
  3, 102, :_reduce_53,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  4, 105, :_reduce_56,
  1, 91, :_reduce_none,
  3, 91, :_reduce_58,
  0, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 107, :_reduce_61,
  1, 83, :_reduce_62,
  1, 85, :_reduce_63,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  3, 70, :_reduce_70,
  3, 79, :_reduce_71,
  0, 93, :_reduce_72,
  1, 93, :_reduce_73,
  3, 93, :_reduce_74,
  3, 110, :_reduce_75,
  3, 112, :_reduce_76,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  0, 96, :_reduce_79,
  1, 96, :_reduce_80,
  3, 96, :_reduce_81,
  1, 114, :_reduce_none,
  3, 114, :_reduce_83,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  4, 87, :_reduce_100,
  3, 87, :_reduce_101,
  1, 89, :_reduce_102,
  1, 89, :_reduce_103,
  1, 86, :_reduce_104,
  4, 82, :_reduce_105,
  4, 82, :_reduce_106,
  6, 72, :_reduce_107,
  5, 72, :_reduce_108,
  0, 116, :_reduce_none,
  4, 116, :_reduce_110,
  3, 116, :_reduce_111,
  1, 109, :_reduce_none,
  3, 109, :_reduce_113,
  3, 109, :_reduce_114,
  3, 109, :_reduce_115,
  3, 109, :_reduce_116,
  3, 109, :_reduce_117,
  3, 109, :_reduce_118,
  3, 109, :_reduce_119,
  3, 109, :_reduce_120,
  2, 109, :_reduce_121,
  3, 109, :_reduce_122,
  3, 109, :_reduce_123,
  3, 109, :_reduce_124,
  3, 109, :_reduce_125,
  3, 109, :_reduce_126,
  3, 109, :_reduce_127,
  2, 109, :_reduce_128,
  3, 109, :_reduce_129,
  3, 109, :_reduce_130,
  3, 109, :_reduce_131,
  5, 71, :_reduce_132,
  1, 118, :_reduce_none,
  2, 118, :_reduce_134,
  5, 119, :_reduce_135,
  4, 119, :_reduce_136,
  1, 120, :_reduce_none,
  3, 120, :_reduce_138,
  3, 88, :_reduce_139,
  1, 122, :_reduce_none,
  4, 122, :_reduce_141,
  1, 124, :_reduce_none,
  3, 124, :_reduce_143,
  3, 123, :_reduce_144,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_152,
  1, 121, :_reduce_none,
  1, 125, :_reduce_154,
  3, 125, :_reduce_155,
  2, 73, :_reduce_156,
  6, 75, :_reduce_157,
  5, 75, :_reduce_158,
  7, 76, :_reduce_159,
  6, 76, :_reduce_160,
  6, 77, :_reduce_161,
  5, 77, :_reduce_162,
  1, 95, :_reduce_163,
  1, 90, :_reduce_164,
  1, 90, :_reduce_165,
  1, 90, :_reduce_166,
  1, 128, :_reduce_none,
  3, 128, :_reduce_168,
  1, 130, :_reduce_169,
  1, 131, :_reduce_170,
  1, 131, :_reduce_171,
  1, 131, :_reduce_172,
  1, 131, :_reduce_173,
  1, 131, :_reduce_none,
  0, 65, :_reduce_175,
  0, 132, :_reduce_176,
  1, 126, :_reduce_none,
  3, 126, :_reduce_178,
  3, 126, :_reduce_179,
  1, 133, :_reduce_none,
  3, 133, :_reduce_181,
  3, 134, :_reduce_182,
  1, 134, :_reduce_183,
  3, 134, :_reduce_184,
  1, 134, :_reduce_185,
  1, 129, :_reduce_none,
  2, 129, :_reduce_187,
  1, 127, :_reduce_none,
  2, 127, :_reduce_189,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 84, :_reduce_192,
  3, 108, :_reduce_193,
  4, 108, :_reduce_194,
  2, 108, :_reduce_195,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  0, 94, :_reduce_none,
  1, 94, :_reduce_199,
  1, 117, :_reduce_200 ]

racc_reduce_n = 201

racc_shift_n = 331

racc_token_table = {
  false => 0,
  :error => 1,
  :LBRACK => 2,
  :DQTEXT => 3,
  :SQTEXT => 4,
  :RBRACK => 5,
  :LBRACE => 6,
  :RBRACE => 7,
  :SYMBOL => 8,
  :FARROW => 9,
  :COMMA => 10,
  :TRUE => 11,
  :FALSE => 12,
  :EQUALS => 13,
  :APPENDS => 14,
  :LESSEQUAL => 15,
  :NOTEQUAL => 16,
  :DOT => 17,
  :COLON => 18,
  :LLCOLLECT => 19,
  :RRCOLLECT => 20,
  :QMARK => 21,
  :LPAREN => 22,
  :RPAREN => 23,
  :ISEQUAL => 24,
  :GREATEREQUAL => 25,
  :GREATERTHAN => 26,
  :LESSTHAN => 27,
  :IF => 28,
  :ELSE => 29,
  :IMPORT => 30,
  :DEFINE => 31,
  :ELSIF => 32,
  :VARIABLE => 33,
  :CLASS => 34,
  :INHERITS => 35,
  :NODE => 36,
  :BOOLEAN => 37,
  :NAME => 38,
  :SEMIC => 39,
  :CASE => 40,
  :DEFAULT => 41,
  :AT => 42,
  :LCOLLECT => 43,
  :RCOLLECT => 44,
  :CLASSNAME => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61 }

racc_nt_base = 62

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LBRACK",
  "DQTEXT",
  "SQTEXT",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSNAME",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "$start",
  "program",
  "statements",
  "nil",
  "statement",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "funcvalues",
  "namestring",
  "resourceref",
  "name",
  "variable",
  "type",
  "boolean",
  "funcrvalue",
  "selector",
  "quotedtext",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "classref",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "simplervalue",
  "resourceinst",
  "resourcename",
  "undef",
  "array",
  "expression",
  "param",
  "rvalue",
  "addparam",
  "anyparam",
  "rvalues",
  "comma",
  "else",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "qtexts",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.ra', 29)
  def _reduce_1(val, _values, result)
        if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end

    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'grammar.ra', 48)
  def _reduce_4(val, _values, result)
        if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end

    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.ra', 77)
  def _reduce_18(val, _values, result)
        args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 85)
  def _reduce_19(val, _values, result)
        args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_20(val, _values, result)
        result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 99)
  def _reduce_21(val, _values, result)
        args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement

    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.ra', 110)
  def _reduce_24(val, _values, result)
        result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 115)
  def _reduce_25(val, _values, result)
        unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]

    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_33(val, _values, result)
                        result = ast AST::Name, :value => val[0][:value]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 138)
  def _reduce_34(val, _values, result)
        @lexer.commentpop
    array = val[2]
    if array.instance_of?(AST::ResourceInstance)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ResourceInstance)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::Resource,
            :type => val[0],
            :title => instance[0],
            :params => instance[1])
    }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 158)
  def _reduce_35(val, _values, result)
        # This is a deprecated syntax.
    error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_36(val, _values, result)
        # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :params => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 167)
  def _reduce_37(val, _values, result)
        @lexer.commentpop
    result = ast AST::ResourceOverride, :object => val[0], :params => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 174)
  def _reduce_38(val, _values, result)
        type = val[0]

    if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect without storeconfigs being set")
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 198)
  def _reduce_39(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_40(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 204)
  def _reduce_41(val, _values, result)
        if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    args[:override] = val[3]
    result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 224)
  def _reduce_42(val, _values, result)
        if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type }

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 245)
  def _reduce_43(val, _values, result)
        if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 253)
  def _reduce_44(val, _values, result)
        if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end

    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_47(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'grammar.ra', 271)
  def _reduce_49(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 275)
  def _reduce_50(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 276)
  def _reduce_51(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 279)
  def _reduce_52(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 284)
  def _reduce_53(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'grammar.ra', 293)
  def _reduce_56(val, _values, result)
        result = ast AST::ResourceInstance, :children => [val[0],val[2]]

    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'grammar.ra', 298)
  def _reduce_58(val, _values, result)
        if val[0].instance_of?(AST::ResourceInstance)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end

    result
  end
.,.,

# reduce 59 omitted

# reduce 60 omitted

module_eval(<<'.,.,', 'grammar.ra', 310)
  def _reduce_61(val, _values, result)
        result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 314)
  def _reduce_62(val, _values, result)
        result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 318)
  def _reduce_63(val, _values, result)
        result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 329)
  def _reduce_70(val, _values, result)
        if val[0][:value] =~ /::/
        raise Puppet::ParseError, "Cannot assign to variables in other namespaces"
    end
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 338)
  def _reduce_71(val, _values, result)
        variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 344)
  def _reduce_72(val, _values, result)
        result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 348)
  def _reduce_74(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 357)
  def _reduce_75(val, _values, result)
        result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_76(val, _values, result)
        result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
                                     :add => true

    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'grammar.ra', 370)
  def _reduce_79(val, _values, result)
        result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 372)
  def _reduce_80(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_81(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end

    result
  end
.,.,

# reduce 82 omitted

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_83(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end

    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'grammar.ra', 411)
  def _reduce_100(val, _values, result)
        args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => args,
        :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_101(val, _values, result)
        result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 424)
  def _reduce_102(val, _values, result)
        result = ast AST::String, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 426)
  def _reduce_103(val, _values, result)
        result = ast AST::FlatString, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 430)
  def _reduce_104(val, _values, result)
        result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 434)
  def _reduce_105(val, _values, result)
        Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 437)
  def _reduce_106(val, _values, result)
        result = ast AST::ResourceReference, :type => val[0], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 441)
  def _reduce_107(val, _values, result)
        @lexer.commentpop
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_108(val, _values, result)
        @lexer.commentpop
    args = {
        :test => val[1],
        :statements => ast(AST::Nop)
    }

    if val[4]
        args[:else] = val[4]
    end

    result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'grammar.ra', 469)
  def _reduce_110(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 473)
  def _reduce_111(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'grammar.ra', 491)
  def _reduce_113(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 494)
  def _reduce_114(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 497)
  def _reduce_115(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 500)
  def _reduce_116(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 503)
  def _reduce_117(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 506)
  def _reduce_118(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 509)
  def _reduce_119(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 512)
  def _reduce_120(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 515)
  def _reduce_121(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 518)
  def _reduce_122(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 521)
  def _reduce_123(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 524)
  def _reduce_124(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 527)
  def _reduce_125(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 530)
  def _reduce_126(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_127(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 536)
  def _reduce_128(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_129(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 542)
  def _reduce_130(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 545)
  def _reduce_131(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_132(val, _values, result)
        @lexer.commentpop
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options

    result
  end
.,.,

# reduce 133 omitted

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_134(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 568)
  def _reduce_135(val, _values, result)
        @lexer.commentpop
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 580)
  def _reduce_138(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 589)
  def _reduce_139(val, _values, result)
        result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 140 omitted

module_eval(<<'.,.,', 'grammar.ra', 594)
  def _reduce_141(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 600)
  def _reduce_143(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 609)
  def _reduce_144(val, _values, result)
        result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'grammar.ra', 620)
  def _reduce_152(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'grammar.ra', 625)
  def _reduce_154(val, _values, result)
     result = [val[0].value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 627)
  def _reduce_155(val, _values, result)
        results = val[0] << val[2].value

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 631)
  def _reduce_156(val, _values, result)
        val[1].each do |file|
        import(file)
    end

    result = AST::ASTArray.new(:children => [])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_157(val, _values, result)
        @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 648)
  def _reduce_158(val, _values, result)
        @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
    @lexer.indefine = false
    result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 656)
  def _reduce_159(val, _values, result)
        @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :arguments => val[2], :parent => val[3], :code => val[5], :line => val[0][:line]
    result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 662)
  def _reduce_160(val, _values, result)
        @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :arguments => val[2], :parent => val[3], :line => val[0][:line]
    result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 670)
  def _reduce_161(val, _values, result)
        @lexer.commentpop
    newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
    result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_162(val, _values, result)
        @lexer.commentpop
    newnode val[1], :parent => val[2], :line => val[0][:line]
    result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 679)
  def _reduce_163(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 681)
  def _reduce_164(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 682)
  def _reduce_165(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_166(val, _values, result)
     result = "class" 
    result
  end
.,.,

# reduce 167 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_168(val, _values, result)
        result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 695)
  def _reduce_169(val, _values, result)
        result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 698)
  def _reduce_170(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 699)
  def _reduce_171(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_172(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 701)
  def _reduce_173(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 705)
  def _reduce_175(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 709)
  def _reduce_176(val, _values, result)
        result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 177 omitted

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_178(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 717)
  def _reduce_179(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 180 omitted

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_181(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 729)
  def _reduce_182(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_183(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_184(val, _values, result)
        result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 738)
  def _reduce_185(val, _values, result)
        result = [val[0][:value]]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 743)
  def _reduce_187(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 748)
  def _reduce_189(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 190 omitted

# reduce 191 omitted

module_eval(<<'.,.,', 'grammar.ra', 754)
  def _reduce_192(val, _values, result)
        result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 758)
  def _reduce_193(val, _values, result)
        if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 765)
  def _reduce_194(val, _values, result)
        if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_195(val, _values, result)
        result = ast AST::ASTArray

    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_199(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 781)
  def _reduce_200(val, _values, result)
        result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
